import{_ as e,o as a,c as l,e as i}from"./app-42511d1c.js";const r={},o=i('<h2 id="webpack-的作用是什么吗" tabindex="-1"><a class="header-anchor" href="#webpack-的作用是什么吗" aria-hidden="true">#</a> webpack 的作用是什么吗？</h2><ul><li><p>模块打包。可以将不同模块的文件打包整合在一起，并且保证它们之间的引用正确，执行有序。利用打包我们就可以在开发的时候根据我们自己的业务自由划分文件模块，保证项目结构的清晰和可读性。</p></li><li><p>编译兼容。在前端的“上古时期”，手写一堆浏览器兼容代码一直是令前端工程师头皮发麻的事情，而在今天这个问题被大大的弱化了，通过 webpack 的 Loader 机制，不仅仅可以帮助我们对代码做 polyfill，还可以编译转换诸如.less, .vue, .jsx 这类在浏览器无法识别的格式文件，让我们在开发的时候可以使用新特性和新语法做开发，提高开发效率。</p></li><li><p>能力扩展。通过 webpack 的 Plugin 机制，我们在实现模块化打包和编译兼容的基础上，可以进一步实现诸如按需加载，代码压缩等一系列功能，帮助我们进一步提高自动化程度，工程效率以及打包输出的质量。</p></li></ul><h2 id="webpack-的打包流程" tabindex="-1"><a class="header-anchor" href="#webpack-的打包流程" aria-hidden="true">#</a> Webpack 的打包流程</h2><ol><li>读取 webpack 的配置参数；</li><li>启动 webpack，创建 Compiler 对象并开始解析项目；</li><li>从入口文件（entry）开始解析，并且找到其导入的依赖模块，递归遍历分析，形成依赖关系树；</li><li>对不同文件类型的依赖模块文件使用对应的 Loader 进行编译，最终转为 Javascript 文件；</li><li>整个过程中 webpack 会通过发布订阅模式，向外抛出一些 hooks，而 webpack 的插件即可通过监听这些关键的事件节点，执行插件任务进而达到干预输出结果的目的。</li></ol><h2 id="你知道-sourcemap-是什么吗" tabindex="-1"><a class="header-anchor" href="#你知道-sourcemap-是什么吗" aria-hidden="true">#</a> 你知道 sourceMap 是什么吗？</h2><p>sourceMap 是一项将编译、打包、压缩后的代码映射回源代码的技术，由于打包压缩后的代码并没有阅读性可言，一旦在开发中报错或者遇到问题，直接在混淆代码中 debug 问题会带来非常糟糕的体验，sourceMap 可以帮助我们快速定位到源代码的位置，提高我们的开发效率。sourceMap 其实并不是 Webpack 特有的功能，而是 Webpack 支持 sourceMap，像 JQuery 也支持 sourceMap。</p><h2 id="是否写过-loader-简单描述一下编写-loader-的思路" tabindex="-1"><a class="header-anchor" href="#是否写过-loader-简单描述一下编写-loader-的思路" aria-hidden="true">#</a> 是否写过 Loader？简单描述一下编写 loader 的思路？</h2><p>存在非 JS 类型文件时，我们需要先对其进行必要的转换，才能继续执行打包任务，这也是 Loader 机制存在的意义。</p><p>针对每个文件类型，loader 是支持以数组的形式配置多个的，因此当 Webpack 在转换该文件类型的时候，会按顺序链式调用每一个 loader，前一个 loader 返回的内容会作为下一个 loader 的入参。因此 loader 的开发需要遵循一些规范，比如返回值必须是标准的 JS 代码字符串，以保证下一个 loader 能够正常工作，同时在开发上需要严格遵循“单一职责”，只关心 loader 的输出以及对应的输出。</p><h2 id="是否写过-plugin-简单描述一下编写-plugin-的思路" tabindex="-1"><a class="header-anchor" href="#是否写过-plugin-简单描述一下编写-plugin-的思路" aria-hidden="true">#</a> 是否写过 Plugin？简单描述一下编写 plugin 的思路？</h2><p>webpack 基于发布订阅模式，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务，从而实现自己想要的功能。</p><p>Plugin 的开发和开发 Loader 一样，需要遵循一些开发上的规范和原则：</p><ul><li>插件必须是一个函数或者是一个包含 apply 方法的对象，这样才能访问 compiler 实例；</li><li>传给每个插件的 compiler 和 compilation 对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件;</li><li>异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住;</li></ul><h2 id="babel-的转换过程" tabindex="-1"><a class="header-anchor" href="#babel-的转换过程" aria-hidden="true">#</a> Babel 的转换过程</h2><p>Babel 的转换过程可以分为三个主要步骤：解析（Parsing）、转换（Transformation）和生成（Generation）。</p><ol><li><p>解析（Parsing）：在这个阶段，Babel 会将源代码解析成抽象语法树（AST）。它会使用词法分析器（Tokenizer）将源代码分解为令牌（Tokens），然后使用语法分析器（Parser）将这些令牌组织成一个树状结构的 AST。AST 表示了代码的结构和语法关系。</p></li><li><p>转换（Transformation）：在转换阶段，Babel 会遍历 AST 并对其进行修改和转换。这个过程是通过插件（Plugins）来实现的。每个插件都会对 AST 进行特定的操作，例如添加、修改或删除节点，以实现代码转换的目的。插件可以根据开发者的需求来选择和配置。</p></li><li><p>生成（Generation）：在最后一个阶段，Babel 会根据经过转换后的 AST 生成新的 JavaScript 代码。Babel 会遍历修改后的 AST，并将其重新转换为字符串形式的代码。这个过程被称为代码生成（Code Generation）。</p></li></ol>',16),p=[o];function c(d,n){return a(),l("div",null,p)}const h=e(r,[["render",c],["__file","index.html.vue"]]);export{h as default};
